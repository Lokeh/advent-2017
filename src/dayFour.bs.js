// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Set    = require("bs-platform/lib/js/set.js");
var $$Array  = require("bs-platform/lib/js/array.js");
var Curry    = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");

var StringSet = $$Set.Make([$$String.compare]);

function arrayToStringSet(arr) {
  return Curry._1(StringSet[/* of_list */25], $$Array.to_list(arr));
}

function noDuplicates(pass) {
  var phrases = pass.split(" ");
  return +(Curry._1(StringSet[/* cardinal */18], Curry._1(StringSet[/* of_list */25], $$Array.to_list(phrases))) === phrases.length);
}

function part1(input) {
  return $$Array.map(noDuplicates, input.split("\n")).filter((function (v) {
                return v;
              })).length;
}

function compare(s1, s2) {
  var sa1 = s1.split("").sort().join();
  var sa2 = s2.split("").sort().join();
  var match = +(sa1 === sa2);
  if (match !== 0) {
    return 0;
  } else {
    var match$1 = +(sa1 < sa2);
    if (match$1 !== 0) {
      return -1;
    } else {
      return 1;
    }
  }
}

var Anagram = /* module */[/* compare */compare];

var AnagramSet = $$Set.Make(Anagram);

function arrayToAnagramSet(ss) {
  return Curry._1(AnagramSet[/* of_list */25], $$Array.to_list(ss));
}

function noAnagrams(pass) {
  var phrases = pass.split(" ");
  return +(Curry._1(AnagramSet[/* cardinal */18], Curry._1(AnagramSet[/* of_list */25], $$Array.to_list(phrases))) === phrases.length);
}

function part2(input) {
  return $$Array.map(noAnagrams, input.split("\n")).filter((function (v) {
                return v;
              })).length;
}

exports.StringSet         = StringSet;
exports.arrayToStringSet  = arrayToStringSet;
exports.noDuplicates      = noDuplicates;
exports.part1             = part1;
exports.Anagram           = Anagram;
exports.AnagramSet        = AnagramSet;
exports.arrayToAnagramSet = arrayToAnagramSet;
exports.noAnagrams        = noAnagrams;
exports.part2             = part2;
/* StringSet Not a pure module */
