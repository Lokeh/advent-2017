// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Set            = require("bs-platform/lib/js/set.js");
var $$Array          = require("bs-platform/lib/js/array.js");
var Curry            = require("bs-platform/lib/js/curry.js");
var $$String         = require("bs-platform/lib/js/string.js");
var Utils$Advent2017 = require("./Utils.bs.js");

var cases = /* :: */[
  /* tuple */[
    "aa bb cc dd ee\naa bb cc dd aa\naa bb cc dd aaa",
    2
  ],
  /* [] */0
];

var StringSet = $$Set.Make([$$String.compare]);

function arrayToStringSet(arr) {
  return Curry._1(StringSet[/* of_list */25], $$Array.to_list(arr));
}

function noDuplicates(pass) {
  var phrases = pass.split(" ");
  return +(Curry._1(StringSet[/* cardinal */18], Curry._1(StringSet[/* of_list */25], $$Array.to_list(phrases))) === phrases.length);
}

function solve(input) {
  return $$Array.map(noDuplicates, input.split("\n")).filter((function (v) {
                return v;
              })).length;
}

var Part1 = /* module */[
  /* cases */cases,
  /* StringSet */StringSet,
  /* arrayToStringSet */arrayToStringSet,
  /* noDuplicates */noDuplicates,
  /* solve */solve
];

var Part1Test = Utils$Advent2017.Test([
      cases,
      solve
    ]);

var cases$1 = /* :: */[
  /* tuple */[
    "abcde fghij\nabcde xyz ecdab\na ab abc abd abf abj\niiii oiii ooii oooi oooo\noiii ioii iioi iiio",
    3
  ],
  /* [] */0
];

function compare(s1, s2) {
  var sa1 = s1.split("").sort().join();
  var sa2 = s2.split("").sort().join();
  var match = +(sa1 === sa2);
  if (match !== 0) {
    return 0;
  } else {
    var match$1 = +(sa1 < sa2);
    if (match$1 !== 0) {
      return -1;
    } else {
      return 1;
    }
  }
}

var Anagram = /* module */[/* compare */compare];

var AnagramSet = $$Set.Make(Anagram);

function arrayToAnagramSet(ss) {
  return Curry._1(AnagramSet[/* of_list */25], $$Array.to_list(ss));
}

function noAnagrams(pass) {
  var phrases = pass.split(" ");
  return +(Curry._1(AnagramSet[/* cardinal */18], Curry._1(AnagramSet[/* of_list */25], $$Array.to_list(phrases))) === phrases.length);
}

function solve$1(input) {
  return $$Array.map(noAnagrams, input.split("\n")).filter((function (v) {
                return v;
              })).length;
}

var Part2 = /* module */[
  /* cases */cases$1,
  /* Anagram */Anagram,
  /* AnagramSet */AnagramSet,
  /* arrayToAnagramSet */arrayToAnagramSet,
  /* noAnagrams */noAnagrams,
  /* solve */solve$1
];

var Part2Test = Utils$Advent2017.Test([
      cases$1,
      solve$1
    ]);

var test_part1 = Part1Test[/* check */0];

var test_part2 = Part2Test[/* check */0];

var part1 = solve;

var part2 = solve$1;

exports.Part1      = Part1;
exports.Part1Test  = Part1Test;
exports.Part2      = Part2;
exports.Part2Test  = Part2Test;
exports.part1      = part1;
exports.test_part1 = test_part1;
exports.part2      = part2;
exports.test_part2 = test_part2;
/* StringSet Not a pure module */
