// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array     = require("bs-platform/lib/js/array.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function jump(stack, _pos, _step) {
  while(true) {
    var step = _step;
    var pos = _pos;
    var exit = 0;
    var offset;
    try {
      offset = Caml_array.caml_array_get(stack, pos);
      exit = 1;
    }
    catch (exn){
      return step;
    }
    if (exit === 1) {
      var pos$prime = pos + offset | 0;
      Caml_array.caml_array_set(stack, pos, offset + 1 | 0);
      _step = step + 1 | 0;
      _pos = pos$prime;
      continue ;
      
    }
    
  };
}

function solve(instructions) {
  var stack = $$Array.map(Caml_format.caml_int_of_string, instructions.split("\n"));
  return jump(stack, 0, 0);
}

var Part1_000 = /* cases : :: */[
  /* tuple */[
    "0\n3\n0\n1\n-3",
    5
  ],
  /* [] */0
];

var Part1 = /* module */[
  Part1_000,
  /* jump */jump,
  /* solve */solve
];

function jump$1(stack, _pos, _step) {
  while(true) {
    var step = _step;
    var pos = _pos;
    var exit = 0;
    var offset;
    try {
      offset = Caml_array.caml_array_get(stack, pos);
      exit = 1;
    }
    catch (exn){
      return step;
    }
    if (exit === 1) {
      if (offset >= 3) {
        var pos$prime = pos + offset | 0;
        Caml_array.caml_array_set(stack, pos, offset - 1 | 0);
        _step = step + 1 | 0;
        _pos = pos$prime;
        continue ;
        
      } else {
        var pos$prime$1 = pos + offset | 0;
        Caml_array.caml_array_set(stack, pos, offset + 1 | 0);
        _step = step + 1 | 0;
        _pos = pos$prime$1;
        continue ;
        
      }
    }
    
  };
}

function solve$1(instructions) {
  var stack = $$Array.map(Caml_format.caml_int_of_string, instructions.split("\n"));
  return jump$1(stack, 0, 0);
}

var Part2_000 = /* cases : :: */[
  /* tuple */[
    "0\n3\n0\n1\n-3",
    10
  ],
  /* [] */0
];

var Part2 = /* module */[
  Part2_000,
  /* jump */jump$1,
  /* solve */solve$1
];

var part1 = solve;

var part2 = solve$1;

exports.Part1 = Part1;
exports.Part2 = Part2;
exports.part1 = part1;
exports.part2 = part2;
/* No side effect */
