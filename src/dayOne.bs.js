// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array     = require("bs-platform/lib/js/array.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function explode(input) {
  return $$Array.map(Caml_format.caml_int_of_string, input.split(""));
}

function solver(digits, len, step, xPos, total) {
  var x = Caml_array.caml_array_get(digits, xPos);
  var yPos = Caml_int32.mod_(xPos + step | 0, len);
  var y = Caml_array.caml_array_get(digits, yPos);
  var next = function (param, param$1) {
    return solver(digits, len, step, param, param$1);
  };
  var isEndOfList = +(xPos === (len - 1 | 0));
  var match = +(x === y);
  if (match !== 0) {
    if (isEndOfList !== 0) {
      return total + x | 0;
    } else {
      return next(xPos + 1 | 0, total + x | 0);
    }
  } else if (isEndOfList !== 0) {
    return total;
  } else {
    return next(xPos + 1 | 0, total);
  }
}

function neighbor(input) {
  var digits = explode(input);
  return solver(digits, digits.length, 1, 0, 0);
}

function halfway(input) {
  var len = input.length;
  var step = len / 2 | 0;
  var digits = explode(input);
  return solver(digits, len, step, 0, 0);
}

exports.explode  = explode;
exports.solver   = solver;
exports.neighbor = neighbor;
exports.halfway  = halfway;
/* No side effect */
