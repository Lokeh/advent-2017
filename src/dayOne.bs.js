// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array          = require("bs-platform/lib/js/array.js");
var Caml_array       = require("bs-platform/lib/js/caml_array.js");
var Caml_int32       = require("bs-platform/lib/js/caml_int32.js");
var Caml_format      = require("bs-platform/lib/js/caml_format.js");
var Utils$Advent2017 = require("./Utils.bs.js");

function explode(input) {
  return $$Array.map(Caml_format.caml_int_of_string, input.split(""));
}

function solver(digits, len, step, xPos, total) {
  var x = Caml_array.caml_array_get(digits, xPos);
  var yPos = Caml_int32.mod_(xPos + step | 0, len);
  var y = Caml_array.caml_array_get(digits, yPos);
  var next = function (param, param$1) {
    return solver(digits, len, step, param, param$1);
  };
  var isEndOfList = +(xPos === (len - 1 | 0));
  var match = +(x === y);
  if (match !== 0) {
    if (isEndOfList !== 0) {
      return total + x | 0;
    } else {
      return next(xPos + 1 | 0, total + x | 0);
    }
  } else if (isEndOfList !== 0) {
    return total;
  } else {
    return next(xPos + 1 | 0, total);
  }
}

function solve(input) {
  var digits = explode(input);
  return solver(digits, digits.length, 1, 0, 0);
}

var Part1_000 = /* cases : :: */[
  /* tuple */[
    "1122",
    3
  ],
  /* :: */[
    /* tuple */[
      "1111",
      4
    ],
    /* :: */[
      /* tuple */[
        "1234",
        0
      ],
      /* :: */[
        /* tuple */[
          "91212129",
          9
        ],
        /* [] */0
      ]
    ]
  ]
];

var Part1 = /* module */[
  Part1_000,
  /* solve */solve
];

var Part1Test = Utils$Advent2017.Test(Part1);

function solve$1(input) {
  var len = input.length;
  var step = len / 2 | 0;
  var digits = explode(input);
  return solver(digits, len, step, 0, 0);
}

var Part2_000 = /* cases : :: */[
  /* tuple */[
    "1212",
    6
  ],
  /* :: */[
    /* tuple */[
      "1221",
      0
    ],
    /* :: */[
      /* tuple */[
        "123425",
        4
      ],
      /* :: */[
        /* tuple */[
          "123123",
          12
        ],
        /* :: */[
          /* tuple */[
            "12131415",
            4
          ],
          /* [] */0
        ]
      ]
    ]
  ]
];

var Part2 = /* module */[
  Part2_000,
  /* solve */solve$1
];

var Part2Test = Utils$Advent2017.Test(Part2);

var test_part1 = Part1Test[/* check */0];

var test_part2 = Part2Test[/* check */0];

var part1 = solve;

var part2 = solve$1;

exports.explode    = explode;
exports.solver     = solver;
exports.Part1      = Part1;
exports.Part1Test  = Part1Test;
exports.Part2      = Part2;
exports.Part2Test  = Part2Test;
exports.part1      = part1;
exports.test_part1 = test_part1;
exports.part2      = part2;
exports.test_part2 = test_part2;
/* Part1Test Not a pure module */
