// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array                 = require("bs-platform/lib/js/array.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Js_exn                  = require("bs-platform/lib/js/js_exn.js");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function abs(prim) {
  return Math.abs(prim);
}

function spiral(n) {
  var _x = 0;
  var _y = 0;
  var _count = 1;
  while(true) {
    var count = _count;
    var y = _y;
    var x = _x;
    var finished = +(count === n);
    var pivot = +(Math.abs(x) <= Math.abs(y) && (x !== y || x >= 0));
    if (finished !== 0) {
      return /* tuple */[
              x,
              y
            ];
    } else if (pivot !== 0) {
      var match = +(y >= 0);
      var x$prime = x + (
        match !== 0 ? 1 : -1
      ) | 0;
      _count = count + 1 | 0;
      _x = x$prime;
      continue ;
      
    } else {
      var match$1 = +(x >= 0);
      var y$prime = y + (
        match$1 !== 0 ? -1 : 1
      ) | 0;
      _count = count + 1 | 0;
      _y = y$prime;
      continue ;
      
    }
  };
}

function distance(param) {
  return Math.abs(param[0]) + Math.abs(param[1]) | 0;
}

function part1(n) {
  return distance(spiral(n));
}

function makeGrid(n) {
  var d = n / 2 | 0;
  return $$Array.init(n, (function (y) {
                return $$Array.init(n, (function (x) {
                              return /* Coordinates */Block.__(0, [
                                        x - d | 0,
                                        (-y | 0) + d | 0
                                      ]);
                            }));
              }));
}

function get(grid, d, x, y) {
  var exit = 0;
  var val;
  try {
    val = Caml_array.caml_array_get(Caml_array.caml_array_get(grid, -(y - d | 0) | 0), x + d | 0);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return 0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    if (val.tag) {
      return val[0];
    } else {
      return 0;
    }
  }
  
}

function set(grid, d, x, y, el) {
  return Caml_array.caml_array_set(Caml_array.caml_array_get(grid, -(y - d | 0) | 0), x + d | 0, el);
}

function part2(n, magicNumber) {
  var grid = makeGrid(n);
  var partial_arg = n / 2 | 0;
  var get$1 = function (param, param$1) {
    return get(grid, partial_arg, param, param$1);
  };
  var partial_arg$1 = n / 2 | 0;
  var set$1 = function (param, param$1, param$2) {
    return set(grid, partial_arg$1, param, param$1, param$2);
  };
  Curry._3(set$1, 0, 0, /* Number */Block.__(1, [1]));
  var _x = 1;
  var _y = 0;
  while(true) {
    var y = _y;
    var x = _x;
    var pivot = +(Math.abs(x) <= Math.abs(y) && (x !== y || x >= 0));
    var n1 = Curry._2(get$1, x + 1 | 0, y + 0 | 0);
    var n2 = Curry._2(get$1, x + 1 | 0, y + 1 | 0);
    var n3 = Curry._2(get$1, x + 0 | 0, y + 1 | 0);
    var n4 = Curry._2(get$1, x - 1 | 0, y + 1 | 0);
    var n5 = Curry._2(get$1, x - 1 | 0, y + 0 | 0);
    var n6 = Curry._2(get$1, x - 1 | 0, y - 1 | 0);
    var n7 = Curry._2(get$1, x + 0 | 0, y - 1 | 0);
    var n8 = Curry._2(get$1, x + 1 | 0, y - 1 | 0);
    var sum = ((((((n1 + n2 | 0) + n3 | 0) + n4 | 0) + n5 | 0) + n6 | 0) + n7 | 0) + n8 | 0;
    var finished = +(sum > magicNumber || x === (n / 2 | 0) && y === (n / 2 | 0));
    Curry._3(set$1, x, y, /* Number */Block.__(1, [sum]));
    if (finished !== 0) {
      return sum;
    } else if (pivot !== 0) {
      var match = +(y >= 0);
      var x$prime = x + (
        match !== 0 ? 1 : -1
      ) | 0;
      _x = x$prime;
      continue ;
      
    } else {
      var match$1 = +(x >= 0);
      var y$prime = y + (
        match$1 !== 0 ? -1 : 1
      ) | 0;
      _y = y$prime;
      continue ;
      
    }
  };
}

exports.abs      = abs;
exports.spiral   = spiral;
exports.distance = distance;
exports.part1    = part1;
exports.makeGrid = makeGrid;
exports.get      = get;
exports.set      = set;
exports.part2    = part2;
/* No side effect */
